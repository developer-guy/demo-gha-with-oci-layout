name: Docker

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*.*'

jobs:
  docker:
    name: Docker
    runs-on: ubuntu-latest
    permissions:
      id-token: 'write'
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Go 1.17
        uses: actions/setup-go@v3
        with:
          go-version: 1.17.x
        id: go

      - name: Install regctl
        uses: regclient/actions/regctl-installer@main

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Install cosign
        uses: sigstore/cosign-installer@main

      - name: Prepare
        id: prep
        run: |
          BASE_NAME="alpine:latest"
          BASE_DIGEST="$(regctl image digest "${BASE_NAME}")"
          VERSION=noop
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=edge
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION="${GITHUB_REF#refs/heads/}"
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION="pr-${{ github.event.number }}"
          fi
          VERSION="$(echo "${VERSION}" | sed -r 's#/+#-#g')"
          echo "::set-output name=version::${VERSION}"
          echo "::set-output name=base_name::${BASE_NAME}"
          echo "::set-output name=base_digest::${BASE_DIGEST}"
          echo "::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          echo "::set-output name=date_commit::$(date -d "@$(git log -1 --format=%at)" +%Y-%m-%dT%H:%M:%SZ --utc)"

      - name: Verify go fmt
        run: test -z "$(go fmt ./...)"

      - name: Verify go vet
        run: test -z "$(go vet ./...)"

      - name: Test
        run: make test

      # TODO: use GHA versions of linters
      # - name: Linting
      #   run: make lint

      - name: Build
        uses: docker/build-push-action@v2
        id: build
        with:
          context: .
          # platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x
          platforms: linux/amd64
          push: false
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
          outputs: |
            type=oci,dest=oci-layout.tar

      - name: Convert to OCIDir
        run: regctl image import ocidir://oci-layout oci-layout.tar

      - name: Mutate
        run: |
          regctl image mod ocidir://oci-layout:latest --replace \
            --time-max "${{ steps.prep.outputs.date_commit }}" \
            --annotation "org.opencontainers.image.created=${{ steps.prep.outputs.date_commit }}" \
            --annotation "org.opencontainers.image.base.name=${{ steps.prep.outputs.base_name }}" \
            --annotation "org.opencontainers.image.base.digest=${{ steps.prep.outputs.base_digest }}" \
            --annotation "org.opencontainers.image.source=${{ github.repositoryUrl }}" \
            --annotation "org.opencontainers.image.revision=${{ github.sha }}"

      - name: SBOM
        uses: anchore/sbom-action@v0
        with:
          output-file: "sbom.json"
          image: "oci-dir:oci-layout"
          format: "cyclonedx-json"

      - name: Scan
        uses: anchore/scan-action@v3
        with:
          image: "oci-dir:oci-layout"

      - name: Attach artifacts to image
        id: artifacts
        run: |
          sbom_digest=$(regctl artifact put \
            --config-media-type application/vnd.oci.image.config.v1+json \
            -f sbom.json \
            --annotation org.opencontainers.artifact.type=sbom \
            --annotation org.example.sbom.type=cyclonedx-json \
            --format '{{ .Manifest.GetDescriptor.Digest }}' \
            --refers ocidir://oci-layout:latest)
          echo "::set-output name=sbom_digest::${sbom_digest}"

      - name: zot
        run: |
          docker run --rm -d --name zot \
            -p 127.0.0.1:5000:5000 \
            -u "$(id -u):$(id -g)" \
            -v "$(pwd)/oci-layout:/var/lib/registry/demo" \
            ghcr.io/project-zot/zot-linux-amd64:v1.4.0
          curl -s http://localhost:5000/v2/ -o /dev/null || sleep 2

      - name: sign
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign sign "localhost:5000/demo:latest"
          cosign sign "localhost:5000/demo@${{ steps.artifacts.outputs.sbom_digest }}"

      - name: login and push
        run: |
          regctl registry login \
            -u "${{ secrets.GHCR_USER }}" \
            -p "${{ secrets.GHCR_TOKEN }}" \
            ghcr.io
          regctl image copy --digest-tags -v info \
            ocidir://oci-layout:latest \
            ghcr.io/sudo-bmitch/demo-gha-with-oci-layout:latest
